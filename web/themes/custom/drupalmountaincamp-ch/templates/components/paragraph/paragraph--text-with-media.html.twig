{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set color_type = paragraph.field_color_type.0.value
%}
{%
  set placement = paragraph.field_placement.0.value
%}
{%
  set placement_classes = [
    placement == 'above' ? 'row-start-1 row-end-2 col-start-1 col-end-2',
    placement in ['left', 'right'] ? 'py-4 justify-center',
  ]
%}
{%
  set content_classes = [
    'mx-auto',
    'container',
    'p-page-gutter',
    'placement--' ~ placement,
    'relative',
    placement in ['above'] ? 'grid items-center' : 'lg:grid lg:items-center gap-4',
    placement in ['left', 'right'] ? 'lg:grid-cols-2',
    placement in ['top', 'bottom'] ? 'lg:grid-flow-row',
  ]
%}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished',
    'py-8',
    colour_modifier_class ? 'modifier ' ~ colour_modifier_class,
    color_type ? 'modifier-type ' ~ 'modifier-type-' ~ color_type,
  ]
%}
{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
    <div class="{{ content_classes | join(" ") }}">
      {% block content %}
        {% if placement is not empty and content.field_media|render is not empty %}
          {% if placement in ['top', 'left'] %}
          <div class="relative w-full mx-auto">
            {{ content|without('field_media') }}
          </div>
          {% endif %}
          <div class="relative max-w-xl mx-auto {{ placement_classes | join(" ") }}">
            {{ content.field_media }}
          </div>
          {% if placement in ['right', 'bottom', 'above'] %}
          <div class="relative max-w-xl mx-auto {{ placement_classes | join(" ") }}">
            {{ content|without('field_media') }}
          </div>
          {% endif %}
        {% else %}
          {{ content }}
        {% endif %}
      {% endblock %}
    </div>
  </div>
{% endblock paragraph %}
